{"version":3,"sources":["Components/Edit.js","Components/Text.js","Components/Email.js","Components/Phone.js","Components/General.js","Components/DateRange.js","Components/EducationForm.js","Components/Education.js","Components/PracticalForm.js","Components/Practical.js","App.js","index.js"],"names":["Edit","props","handleChange","toggle","current","className","type","onClick","value","Text","useState","setValue","e","target","editable","label","display","onChange","placeholder","maxLength","length","cols","rows","Email","valid","setValid","input","email","test","validate","noValue","notEditable","Phone","areaCode","setAreaCode","exchangeCode","setExchangeCode","lineCode","setLineCode","code","number","console","log","areaEl","excEl","lineEl","event","General","isEditable","setIsEditable","id","edit","DateRange","monthStart","setMonthStart","yearStart","setYearStart","monthEnd","setMonthEnd","yearEnd","setYearEnd","setCurrent","startMonth","startYear","endMonth","endYear","formatYear","validStart","validEnd","startDate","Date","endDate","getMonth","monthEl","yearEl","defaultValue","min","max","checked","EducationForm","key","uuid","removeButton","preventDefault","remove","Education","addedSections","setAddedSections","update","filter","section","toString","fieldsets","map","index","addButton","next","PracticalForm","Practical","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d7cfab75.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Edit(props) {\n    function handleChange() {\n        props.toggle(!props.current); //toggle prop contains the handleChange method from Parent section\n    }\n    \n    const editable = props.current;\n        if (editable) {\n            return (\n                <div className=\"Save\">\n                  <input type=\"button\" onClick={handleChange} value=\"Save\"></input>\n                </div>\n            );\n        } else {\n            return (\n                <div className=\"Edit\">\n                  <input type=\"button\" onClick={handleChange} value=\"Edit\"></input>\n                </div>\n            );\n        }\n    }\n\nexport default Edit;\n","import React, { useState } from 'react'\n\nfunction Text(props) {\n    const [value, setValue] = useState(\"\");\n    \n    function handleChange(e) {\n        setValue(e.target.value);\n    }\n\n    if (props.editable) {\n        if (props.type === 'text') {\n            return (\n                <div className=\"Text editable\">\n                    <label>{props.label}</label>\n                    <input \n                        className={props.display} \n                        type={props.type} \n                        value={value} \n                        onChange={handleChange} \n                        placeholder={props.placeholder} \n                        maxLength={props.length}></input>\n                </div>\n            );\n        } else if (props.type === 'textarea') {\n            return (\n                <div className=\"Textarea editable\">\n                    <label>{props.label}</label>\n                    <textarea\n                        className={props.display}\n                        value={value}\n                        onChange={handleChange}\n                        placeholder={props.placeholder}\n                        cols={props.cols}\n                        rows={props.rows}\n                        maxLength={props.length}></textarea>\n                </div>\n            );\n        }\n    } else {\n        if (!value) {\n            return (\n                <div className=\"Text notEditable\">\n                    <label>{props.label}</label>\n                    <p className=\"italic\">{props.placeholder}</p>\n                </div>  \n            );\n        } else {\n            return (\n                <div className=\"Text notEditable\">\n                    <label>{props.label}</label>\n                    <p>{value}</p>\n                </div>\n            );\n        }\n    }\n}\n\nexport default Text;","import React, { useState } from 'react';\n\nfunction Email(props) {\n    const [value, setValue] = useState(\"\");\n    const [valid, setValid] = useState(true);\n    \n    function validate(email) {\n        const pattern = /^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$/;\n        const valid = pattern.test(email);\n        setValid(valid);\n    }\n\n    function handleChange(e) {\n        const input = e.target.value;\n        validate(input);\n        setValue(input);\n    };\n\n\nlet editable = \n    <div className=\"Email editable\">\n        <label>{props.label}</label>\n        <input className={props.display} type=\"text\" value={value} onChange={handleChange} placeholder={props.placeholder}></input>\n        <div className=\"error\">{valid ? \"\" : \"Enter a valid email address\"}</div>\n    </div>\n\nlet noValue =\n    <div className=\"Email notEditable\">\n        <label>{props.label}</label>\n        <p className=\"italic\">{props.placeholder}</p>\n    </div> \n\nlet notEditable =\n    <div className=\"Email notEditable\">\n        <label>{props.label}</label>\n        <p>{value}</p>\n    </div>\n\nif (props.editable) {\n    return editable;\n    } else {\n        if (!value) {\n            return noValue;\n        } else {\n            return notEditable;\n        }\n    }\n}\n\n\nexport default Email;","import React, { useState } from 'react'\n\nfunction Phone(props) {\n    const [areaCode, setAreaCode] = useState(\"\");\n    const [exchangeCode, setExchangeCode] = useState(\"\");\n    const [lineCode, setLineCode] = useState(\"\");\n    const [valid, setValid] = useState(true);\n    \n    function validate(number) {\n        const pattern = /^[0-9]*$/;\n        const valid = pattern.test(number);\n        setValid(valid);\n    }\n\n    function handleChange(e, code) {\n        validate(e.target.value);\n        switch (true) {\n            case code === 'area': setAreaCode(e.target.value);\n            break;\n            case code === 'exchange': setExchangeCode(e.target.value);\n            break;\n            case code === 'line': setLineCode(e.target.value);\n            break;\n            default: console.log('no match');\n        }\n    }\n\n    const areaEl = <span className=\"italic\">(Area)</span>;\n    const excEl = <span className=\"italic\">&nbsp;###-</span>;\n    const lineEl = <span className=\"italic\">####</span>\n\n    if (props.editable) {\n        return (\n            <div className=\"Phone editable\">\n                <label>{props.label}</label>\n                <fieldset>\n                        <input className=\"inline\" type=\"text\" value={areaCode} maxLength=\"3\" placeholder=\"Area\" onChange={(event) => handleChange(event, \"area\")}></input>\n                        <input className=\"inline\" type=\"text\" value={exchangeCode} maxLength=\"3\" placeholder=\"###\" onChange={(event) => handleChange(event, \"exchange\")}></input>\n                        <input className=\"inline\" type=\"text\" value={lineCode} maxLength=\"4\" placeholder=\"####\" onChange={(event) => handleChange(event, \"line\")}></input>\n                </fieldset>\n                <div className=\"error\">{valid ? \"\" : \"Enter a valid phone number\"}</div>\n            </div>\n        );\n    } else {\n        return (\n            <div className=\"Phone notEditable\">\n                <label>{props.label}</label>\n                <p className={props.display}>{areaCode ? \"(\" + areaCode + \") \" : areaEl}</p>\n                <p className={props.display}>{exchangeCode ? exchangeCode + \"-\" : excEl}</p>\n                <p className={props.display}>{lineCode ? lineCode : lineEl}</p>\n            </div>\n        );\n    }\n}\n\n\nexport default Phone;","import React, { useState } from 'react'\nimport Edit from './Edit'\nimport Text from './Text'\nimport Email from './Email'\nimport Phone from './Phone'\n\nfunction General() {\n    const [isEditable, setIsEditable] = useState(true);\n    function handleChange(edit) {\n        setIsEditable(edit)\n        console.log(`General component is editable? ${isEditable}`)\n    }\n\n    return (\n        <div className=\"General\" id=\"General\">\n        <h1>General Information</h1>\n        <p>Use this section to include your name and contact information.</p>\n        <Edit \n            current={isEditable}\n            toggle={handleChange} />\n        <form>\n            <fieldset className=\"container\">\n                <Text \n                    display={\"block\"}\n                    length={\"250\"}\n                    placeholder={\"First and last name\"}\n                    type={\"text\"}\n                    label={\"Name\"}\n                    editable={isEditable} />\n                <Email\n                    display={\"block\"}\n                    placeholder={\"Email address\"}\n                    label={\"Email\"}\n                    editable={isEditable} />\n                <Phone \n                    label={\"Phone\"}\n                    display={\"inline\"}\n                    editable={isEditable} />\n            </fieldset>\n        </form>\n        </div>\n    );\n}\n  \n  export default General;","import React, { useState } from 'react'\n\nfunction DateRange(props) {\n    const [monthStart, setMonthStart] = useState(\"\");\n    const [yearStart, setYearStart] = useState(\"\");\n    const [monthEnd, setMonthEnd] = useState(\"\");\n    const [yearEnd, setYearEnd] = useState(\"\");\n    const [current, setCurrent] = useState(false);\n    const [valid, setValid] = useState(true);\n    \n    function validate(startMonth, startYear, endMonth, endYear) {\n        console.log(\"you called validate\");\n        const formatYear = /(19|20)\\d\\d/;\n        const validStart = formatYear.test(startYear);\n        const validEnd = formatYear.test(endYear);\n        if (startYear === \"\" || endYear === \"\") {\n            return;\n        }\n        if (endYear === startYear && validStart && validEnd) {\n            const startDate = new Date(`${startMonth}, ${startYear}`);\n            const endDate = new Date(`${endMonth}, ${endYear}`);\n            console.log(startDate, endDate);\n            if (startDate.getMonth() <= endDate.getMonth()) {\n                console.log(\"start month is less than end month\");\n                setValid(true);\n            } else {\n                console.log(\"start month is greater than end month\");\n                setValid(false);\n            }\n        }\n        else if (endYear >= startYear && validStart && validEnd) {\n            setValid(true);\n        } else {\n            setValid(false);\n        }\n    }\n\n    function handleMonthStartChange(e) {\n        setMonthStart(e.target.value);\n        validate(e.target.value, yearStart, monthEnd, yearEnd);\n    }\n    function handleYearStartChange(e) {\n        setYearStart(e.target.value);\n        validate(monthStart, e.target.value, monthEnd, yearEnd);\n    }\n    function handleMonthEndChange(e) {\n        setMonthEnd(e.target.value);\n        validate(monthStart, yearStart, e.target.value, yearEnd);\n    }\n    function handleYearEndChange(e) {\n        setYearEnd(e.target.value);\n        validate(monthStart, yearStart, monthEnd, e.target.value);\n    }\n    function handleCheck(e) {\n        if (e.target.checked) {\n            setCurrent(true);\n        } else {\n            setCurrent(false);\n        }\n    }\n\n    const monthEl = <span className=\"italic\">Month</span>;\n    const yearEl = <span className=\"italic\">Year</span>;\n    if (props.editable) {\n        return (\n            <div className=\"DateRange editable\">\n                <label>{props.label}</label>\n                <fieldset id=\"rangeStart\">\n                    <p>Start date</p>\n                    <select value={monthStart} onChange={handleMonthStartChange}>\n                        <option value=\"Month\" defaultValue>Month</option>\n                        <option value=\"January\">January</option>\n                        <option value=\"February\">February</option>\n                        <option value=\"March\">March</option>\n                        <option value=\"April\">April</option>\n                        <option value=\"May\">May</option>\n                        <option value=\"June\">June</option>\n                        <option value=\"July\">July</option>\n                        <option value=\"August\">August</option>\n                        <option value=\"September\">September</option>\n                        <option value=\"October\">October</option>\n                        <option value=\"November\">November</option>\n                        <option value=\"December\">December</option>\n                    </select>\n                    <input type=\"number\" min=\"1935\" max=\"2020\" placeholder=\"Year\" onChange={handleYearStartChange} value={yearStart}></input>\n                </fieldset>\n                <fieldset id=\"rangeEnd\">\n                    <p>End date</p>\n                    <select value={monthEnd} onChange={handleMonthEndChange}>\n                        <option value=\"Month\" defaultValue>Month</option>\n                        <option value=\"January\">January</option>\n                        <option value=\"February\">February</option>\n                        <option value=\"March\">March</option>\n                        <option value=\"April\">April</option>\n                        <option value=\"May\">May</option>\n                        <option value=\"June\">June</option>\n                        <option value=\"July\">July</option>\n                        <option value=\"August\">August</option>\n                        <option value=\"September\">September</option>\n                        <option value=\"October\">October</option>\n                        <option value=\"November\">November</option>\n                        <option value=\"December\">December</option>\n                    </select>\n                    <input type=\"number\" min=\"1935\" max=\"2020\" placeholder=\"Year\" onChange={handleYearEndChange} value={yearEnd}></input>\n                    <input className=\"currentCheck\" type=\"checkbox\" checked={current} onChange={handleCheck}></input>\n                    <p className=\"inline\">Current</p>\n                </fieldset>\n                <div className=\"error\">{valid ? \"\" : \"Enter a valid date range\"}</div>\n            </div> \n        );\n    } else {\n        if (current) {\n            return (\n                <div className=\"DateRange notEditable\">\n                    <label>{props.label}</label>\n                    <p className=\"inline month\">{monthStart ? monthStart : monthEl}</p>\n                    <p className=\"inline\">{yearStart ? yearStart : yearEl}</p>\n                    <div className=\"arrow\"></div>\n                    <p className=\"inline\">Current</p>\n                </div>\n                );\n        } else {\n            return (\n                <div className=\"DateRange notEditable\">\n                    <label>{props.label}</label>\n                    <p className=\"inline month\">{monthStart ? monthStart : monthEl}</p>\n                    <p className=\"inline\">{yearStart ? yearStart : yearEl}</p>\n                    <div className=\"arrow\"></div>\n                    <p className=\"inline month\">{monthEnd ? monthEnd : monthEl}</p>\n                    <p className=\"inline\">{yearEnd ? yearEnd : yearEl}</p>\n                </div>\n                );\n        }\n    }\n}\n\nexport default DateRange;","import React from 'react'\nimport Text from './Text'\nimport DateRange from './DateRange'\n\nfunction EducationForm(props) {\n    function remove(e) {\n        const key = props.uuid;\n        e.preventDefault();\n        props.remove(key);\n    }\n\n    const key = (props.uuid) > 0;\n    const removeButton = <button onClick={remove}>Remove</button>;\n    return (\n        <fieldset className=\"container\">\n            <span className=\"removeButton\">{key ? removeButton : \"\"}</span>\n            <Text \n                display={\"block\"}\n                length={\"250\"}\n                placeholder={\"Institution\"}\n                type={\"text\"}\n                label={\"Institution\"}\n                editable={props.isEditable} />\n            <Text \n                display={\"block\"}\n                length={\"250\"}\n                placeholder={\"Course of study\"}\n                type={\"text\"}\n                label={\"Course of study\"}\n                editable={props.isEditable} />\n            <DateRange \n                label={\"Dates of attendance\"}\n                editable={props.isEditable} />\n        </fieldset>\n    );\n}\n\n\nexport default EducationForm;","import React, { useState } from 'react'\nimport Edit from './Edit'\nimport EducationForm from './EducationForm'\n\nfunction Education(props) {\n    const [isEditable, setIsEditable] = useState(true);\n    const [addedSections, setAddedSections] = useState([0]);\n\n    function handleChange(edit) {\n        setIsEditable(edit);\n    }\n\n    function addNew() {\n        const length = addedSections.length;\n        const next = length;\n        setAddedSections([...addedSections, next]);\n    }\n\n    function remove(key) {\n        const update = addedSections.filter((section) => section.toString() !== key);\n        setAddedSections(update);\n    }\n\n    const fieldsets = addedSections.map((index) =>\n            <EducationForm key={index.toString()} uuid={index.toString()} remove={remove} isEditable={isEditable} />\n        );\n    const addButton = <button onClick={addNew}>Add</button>\n    return (\n        <div className=\"Education\">\n        <h1>Education</h1>\n        <p>Here you can enter where you've studied. Start with the most recent.</p>\n        <div className=\"buttons\">\n            <span className=\"addButton\">{isEditable ? addButton : \"\"}</span>\n            <Edit \n                current={isEditable}\n                toggle={handleChange} />\n        </div>\n        <form>\n            {fieldsets}\n        </form>\n        </div>\n    );\n}\n  \n  export default Education;","import React from 'react'\nimport Text from './Text'\nimport DateRange from './DateRange'\n\nfunction PracticalForm(props) {\n    function remove(e) {\n        const key = props.uuid;\n        e.preventDefault();\n        props.remove(key);\n    }\n\n    const key = (props.uuid) > 0;\n    const removeButton = <button onClick={remove}>Remove</button>;\n    return (\n        <fieldset className=\"container\">\n            <span className=\"removeButton\">{key ? removeButton : \"\"}</span>\n            <Text \n                display={\"block\"}\n                length={\"250\"}\n                placeholder={\"Employer\"}\n                label={\"Employer\"}\n                type={\"text\"}\n                editable={props.isEditable} />\n            <Text\n                display={\"block\"}\n                length={\"250\"}\n                placeholder={\"Position title\"}\n                label={\"Position\"}\n                type={\"text\"}\n                editable={props.isEditable} />\n            <DateRange \n                label={\"Dates of employment\"}\n                editable={props.isEditable} />\n            <Text\n                display={\"block\"}\n                length={\"500\"}\n                placeholder={\"Role description\"}\n                label={\"Role Description\"}\n                type={\"textarea\"}\n                cols={\"50\"}\n                rows={\"5\"}\n                editable={props.isEditable} />\n        </fieldset>\n    );\n}\n\n\nexport default PracticalForm;","import React, { useState } from 'react'\nimport Edit from './Edit'\nimport PracticalForm from './PracticalForm'\n\nfunction Practical() {\n    const [isEditable, setIsEditable] = useState(true);\n    const [addedSections, setAddedSections] = useState([0]); \n\n    function handleChange(edit) {\n        setIsEditable(edit)\n    }\n\n    function addNew() {\n        const length = addedSections.length;\n        const next = length;\n        setAddedSections([...addedSections, next]);\n    }\n\n    function remove(key) {\n        const update = addedSections.filter((section) => section.toString() !== key);\n        setAddedSections(update);\n    }\n\n    const fieldsets = addedSections.map((index) =>\n            <PracticalForm key={index.toString()} uuid={index.toString()} remove={remove} isEditable={isEditable} />\n        );\n    const addButton = <button onClick={addNew}>Add</button>\n    \n    return (\n        <div className=\"Practical\">\n            <h1>Practical Experience</h1>\n            <p>List your past employers, and describe what you did in each role.</p>\n            <div className=\"buttons\">\n                <span className=\"addButton\">{isEditable ? addButton : \"\"}</span>\n                <Edit \n                    current={isEditable}\n                    toggle={handleChange} />\n            </div>\n            <form className=\"generatedForm\">\n                {fieldsets}\n            </form>\n        </div>\n        );\n    }\n  \n  export default Practical;","import General from './Components/General'\nimport './App.css'\nimport Education from './Components/Education'\nimport Practical from './Components/Practical'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <General />\n      <Education />\n      <Practical />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}